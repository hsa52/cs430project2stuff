void read_scene(char* filename,Object** object) {
    int c, i = 0;
    FILE *json = fopen(filename, "r");

    if (json == NULL) {
        fprintf(stderr, "Error: Could not open file \"%s\"\n", filename);
        exit(1);
    }

    skip_ws(json);

    // Find the beginning of the list
    expect_c(json, '[');

    skip_ws(json);

    // Find the objects

    while (1) {
        c = fgetc(json);
        if (c == ']') {
            fprintf(stderr, "Error: This is the worst scene file EVER.\n");
            fclose(json);
            return;
        }
        if (c == '{') {
            skip_ws(json);

            // Parse the object
            char *key = next_string(json);
            if (strcmp(key, "type") != 0) {
                fprintf(stderr, "Error: Expected \"type\" key on line number %d.\n", line);
                exit(1);
            }

            skip_ws(json);

            expect_c(json, ':');

            skip_ws(json);

            char *value = next_string(json);
            if (value)

                if (strcmp(value, "camera") == 0) {
                    object[i]->kind = 0;
                } else if (strcmp(value, "sphere") == 0) {
                    object[i]->kind = 1;
                } else if (strcmp(value, "plane") == 0) {
                    object[i]->kind = 2;
                } else {
                    fprintf(stderr, "Error: Unknown type, \"%s\", on line number %d.\n", value, line);
                    exit(1);
                }

            skip_ws(json);

            while (1) {
                // , }
                c = next_c(json);
                if (c == '}') {
                    // stop parsing this object
                    break;
                } else if (c == ',') {
                    // read another field
                    skip_ws(json);
                    char *key = next_string(json);
                    skip_ws(json);
                    expect_c(json, ':');
                    skip_ws(json);
                    if ((strcmp(key, "width") == 0) ||
                        (strcmp(key, "height") == 0) ||
                        (strcmp(key, "radius") == 0)) {
                        double value = next_number(json);
                        if (strcmp(key, "width")) {
                            object[i]->width = value;
                        } else if (strcmp(key, "height") == 0) {
                            object[i]->height = value;
                        } else if (strcmp(key, "radius") == 0) {
                            object[i]->sphere.radius = value;
                        }


                    } else if ((strcmp(key, "color") == 0) ||
                               (strcmp(key, "position") == 0) ||
                               (strcmp(key, "normal") == 0)) {
                        double *value = next_vector(json);
                        if (strcmp(key, "color") == 0) {
                            if (object[i]->kind == 1) {
                                object[i]->sphere.color[0] = value[0];
                                object[i]->sphere.color[1] = value[1];
                                object[i]->sphere.color[3] = value[3];
                            }
                            if (object[i]->kind == 2) {
                                object[i]->plane.color[0] = value[0];
                                object[i]->plane.color[1] = value[1];
                                object[i]->plane.color[3] = value[3];
                            }
                            if (strcmp(key, "position") == 0) {
                                if (object[i]->kind == 1) {
                                    object[i]->position[0] = value[0];
                                    object[i]->position[1] = value[1];
                                    object[i]->position[3] = value[3];
                                }
                                if (strcmp(key, "normal") == 0) {
                                    if (object[i]->kind == 2) {
                                        object[i]->position[0] = value[0];
                                        object[i]->position[1] = value[1];
                                        object[i]->position[3] = value[3];
                                    }

                                }
                            }
                        } else {
                            fprintf(stderr, "Error: Unknown property, \"%s\", on line %d.\n",
                                    key, line);
                            //char* value = next_string(json);
                        }
                        skip_ws(json);
                    }else {
                            fprintf(stderr, "Error: Unexpected value on line %d\n", line);
                            exit(1);
                        }
                    }
                    skip_ws(json);
                    c = next_c(json);
                    if (c == ',') {
                        // noop
                        skip_ws(json);
                    } else if (c == ']') {
                        fclose(json);
                        return;
                    } else
                     {
                        fprintf(stderr, "Error: Expecting ',' or ']' on line %d.\n", line);
                        exit(1);
                    }

            }
        }
    i++;}
}